import { getContext } from 'hono/context-storage';
import { connection, imapConnection } from '@zero/db/schema';
import type { HonoContext } from '../ctx';
import { createDriver } from './driver';
import { and, eq } from 'drizzle-orm';

export const getActiveConnection = async () => {
  const c = getContext<HonoContext>();
  const { session, db } = c.var;
  if (!session?.user) throw new Error('Session Not Found');
  if (!session.activeConnection?.id) {
    // First try standard connection
    const activeConnection = await db.query.connection.findFirst({
      where: and(eq(connection.userId, session.user.id)),
    });
    
    if (activeConnection) {
      return activeConnection;
    }
    
    // If no standard connection, check for IMAP connection
    const activeImapConnection = await db.query.imapConnection.findFirst({
      where: and(eq(imapConnection.userId, session.user.id)),
    });
    
    if (!activeImapConnection) {
      throw new Error(`Active connection not found for user ${session.user.id}`);
    }
    
    return {
      ...activeImapConnection,
      providerId: 'imap', // Set provider ID for IMAP
    };
  }

  // First check standard connections
  const activeConnection = await db.query.connection.findFirst({
    where: and(
      eq(connection.userId, session.user.id),
      eq(connection.id, session.activeConnection.id),
    ),
  });

  if (activeConnection) {
    return activeConnection;
  }
  
  // Then check IMAP connections
  const activeImapConnection = await db.query.imapConnection.findFirst({
    where: and(
      eq(imapConnection.userId, session.user.id),
      eq(imapConnection.id, session.activeConnection.id),
    ),
  });
  
  if (activeImapConnection) {
    return {
      ...activeImapConnection,
      providerId: 'imap', // Set provider ID for IMAP
    };
  }

  throw new Error('Active connection not found');
};

// Use a union type to support both standard connections and IMAP connections
type ConnectionType = typeof connection.$inferSelect | (typeof imapConnection.$inferSelect & { providerId: string });

export const connectionToDriver = (activeConnection: ConnectionType) => {
  if (activeConnection.providerId === 'imap') {
    if (!activeConnection.accessToken) {
      throw new Error('Invalid IMAP connection');
    }

    return createDriver('imap', {
      auth: {
        userId: activeConnection.userId,
        accessToken: activeConnection.accessToken,
        refreshToken: activeConnection.refreshToken || '',
        email: activeConnection.email,
      },
    });
  } else {
    if (!activeConnection.accessToken || !activeConnection.refreshToken) {
      throw new Error('Invalid connection');
    }

    return createDriver(activeConnection.providerId, {
      auth: {
        userId: activeConnection.userId,
        accessToken: activeConnection.accessToken,
        refreshToken: activeConnection.refreshToken,
        email: activeConnection.email,
      },
    });
  }
};

export const deleteActiveConnection = async () => {
  const c = getContext<HonoContext>();

  try {
    const connection = await getActiveConnection();
    if (!connection) return;

    const { session } = c.var;
    session.activeConnection = null;
  } catch (e) {
    // ignore
  }
};
